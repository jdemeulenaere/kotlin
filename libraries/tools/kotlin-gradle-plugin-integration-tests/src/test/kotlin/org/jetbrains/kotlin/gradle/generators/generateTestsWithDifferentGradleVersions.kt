/*
 * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.gradle.generators

import org.jetbrains.kotlin.incremental.isClassFile
import org.jetbrains.org.objectweb.asm.*
import java.io.File
import java.util.*
import kotlin.collections.HashSet
import kotlin.collections.LinkedHashSet

annotation class GradleTestsRootClass

fun main(args: Array<String>) {
    val classesDir = File(args.single())
    val classFiles = classesDir.walk().filter { it.isClassFile() }

    val subtypes = HashMap<String, MutableSet<String>>()
    val supertype = HashMap<String, String>()
    val classInfos = HashMap<String, ClassInfo>()
    val rootClasses = HashSet<ClassInfo>()

    for (classFile in classFiles) {
        val reader = ClassReader(classFile.readBytes())
        val classInfoCollector = ClassInfoCollector()
        reader.accept(classInfoCollector, 0)
        classInfoCollector.classInfo.let { ci ->
            ci.superName?.let { superName ->
                supertype[ci.name] = superName
                subtypes.getOrPut(superName) { HashSet() }.add(ci.name)
            }
            if (GradleTestsRootClass::class.java.canonicalName in ci.annotations) {
                rootClasses.add(ci)
            }
            classInfos[ci.name] = ci
        }
    }

    val visited = HashSet<String>()
    val queue = ArrayDeque<ClassInfo>()
    queue.addAll(rootClasses)
    val concreteTestClasses = HashSet<ClassInfo>()
    while (queue.isNotEmpty()) {
        val classInfo = queue.pollFirst()
        if (visited.add(classInfo.name)) {
            if (!classInfo.isAbstract) concreteTestClasses.add(classInfo)

            for (typeName in (subtypes[classInfo.name] ?: emptySet<String>())) {
                if (typeName !in visited) {
                    queue.add(classInfos[typeName]!!)
                }
            }
        }
    }

    generateTests {
        for (testClass in concreteTestClasses) {
            addTestClass(testClass.name)
        }
    }
}

private data class ClassInfo(
    val name: String,
    val superName: String?,
    private val access: Int,
    val annotations: Set<String>
) {
    val isAbstract: Boolean
        get() = (access and Opcodes.ACC_ABSTRACT) == Opcodes.ACC_ABSTRACT
}

private class ClassInfoCollector : ClassVisitor(Opcodes.API_VERSION) {
    private var name: String? = null
    private var superName: String? = null
    private var access: Int? = null
    private val annotations = HashSet<String>()

    val classInfo: ClassInfo by lazy {
        ClassInfo(name = name!!, superName = superName, access = access!!, annotations = annotations)
    }

    override fun visit(version: Int, access: Int, name: String, signature: String?, superName: String?, interfaces: Array<out String>?) {
        this.name = name.nameToFqName()
        this.superName = superName?.nameToFqName()
        this.access = access
    }

    override fun visitAnnotation(descriptor: String, visible: Boolean): AnnotationVisitor? {
        annotations.add(descriptor.descriptorToFqName())
        return super.visitAnnotation(descriptor, visible)
    }

    private fun String.nameToFqName() = Type.getObjectType(this).className
    private fun String.descriptorToFqName() = Type.getType(this).className
}

private fun generateTests(configureTestGen: TestsGenerator.() -> Unit) {
    TestsGenerator().apply {
        configureTestGen()
        generateTestsImpl(true)
        generateTestsImpl(false)
    }
}

private class TestsGenerator {
    private val sourceTestClasses = LinkedHashSet<String>()

    fun addTestClass(fqName: String) {
        sourceTestClasses.add(fqName)
    }

    fun generateTestsImpl(useMinVersion: Boolean) {
        val testType = if (useMinVersion) "min" else "max"
        val targetModule = integrationTestsModule.resolve("generated/$testType-gradle")
        val targetFile = targetModule.resolve("test/tests.kt")
        targetFile.delete()
        targetFile.parentFile.mkdirs()

        targetFile.bufferedWriter().use { writer ->
            writer.apply {
                appendln("// DO NOT EDIT MANUALLY! GENERATED BY generateTestsWithAdvancedVersion.kt")
                appendln("package ${testType}VersionGradleTests")

                for (sourceTestClass in sourceTestClasses) {
                    val targetTestName = "${sourceTestClass.substringAfterLast(".")}With${testType.capitalize()}Gradle"

                    appendln()
                    appendln("class $targetTestName : ${sourceTestClass}() {")
                    appendln("    override val useMinVersion = $useMinVersion")
                    appendln("}")
                }
            }
        }
    }

    companion object {
        private val integrationTestsModule = File("libraries/tools/kotlin-gradle-plugin-integration-tests")
    }
}
