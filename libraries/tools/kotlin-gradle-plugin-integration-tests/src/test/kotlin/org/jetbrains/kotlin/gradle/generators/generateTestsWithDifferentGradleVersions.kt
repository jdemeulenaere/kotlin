/*
 * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.gradle.generators

import org.jetbrains.kotlin.gradle.*
import org.jetbrains.kotlin.gradle.model.*
import java.io.File
import kotlin.reflect.KClass

fun main() {
    // todo use ASM instead of reflection
    generateTests {
        test<AllOpenModelIT>()
        test<BuildCacheIT>()
        test<BuildCacheRelocationIT>()
        test<ClassFileIsRemovedIT>()
        test<CocoaPodsIT>()
        test<ConfigurationAvoidanceIT>()
        test<CoroutinesIT>()
        test<ExecutionStrategyJsIT>()
        test<ExecutionStrategyJvmIT>()
        test<GradleDaemonMemoryIT>()
        test<HierarchicalMppIT>()
        test<IncrementalCompilationJsMultiProjectIT>()
        test<IncrementalCompilationJvmMultiProjectIT>()
        test<IncrementalJavaChangeDefaultIT>()
        test<IncrementalJavaChangeDisablePreciseIT>()
        test<IncrementalJavaChangePreciseIT>()
        test<JavaUpToDateIT>()
        test<Kapt3Android31IT>()
        test<Kapt3Android32IT>()
        test<Kapt3Android33IT>()
        test<Kapt3IT>()
        test<Kapt3WorkersAndroid32IT>()
        test<Kapt3WorkersIT>()
        test<KaptIncrementalIT>()
        test<KaptIncrementalWithAggregatingApt>()
        test<KaptIncrementalWithIsolatingApt>()
        test<KaptModelIT>()
        test<Kotlin2JsGradlePluginIT>()
        test<KotlinAndroid30GradleIT>()
        test<KotlinAndroid32GradleIT>()
        test<KotlinAndroid33GradleIT>()
        test<KotlinAndroidExtensionIT>()
        test<KotlinDaemonIT>()
        test<KotlinGradleIT>()
        test<KotlinProjectIT>()
        test<MultiplatformGradleIT>()
        test<NewMultiplatformIT>()
        test<NoArgModelIT>()
        test<PluginsDslIT>()
        test<SamWithReceiverModelIT>()
        test<SimpleKotlinGradleIT>()
        test<TestRootAffectedIT>()
        test<UpToDateIT>()
        test<VariantAwareDependenciesIT>()
        test<WorkersIT>()
    }
}

private fun generateTests(configureTestGen: TestsGenerator.() -> Unit) {
    TestsGenerator().apply {
        configureTestGen()
        generateTestsImpl(true)
        generateTestsImpl(false)
    }
}

private class TestsGenerator {
    internal val sourceTestClasses = LinkedHashSet<KClass<*>>()

    internal inline fun <reified T : BaseGradleIT> test() {
        sourceTestClasses.add(T::class)
    }

    fun generateTestsImpl(useMinVersion: Boolean) {
        val testType = if (useMinVersion) "min" else "max"
        val targetModule = integrationTestsModule.resolve("generated/$testType-gradle")
        val targetFile = targetModule.resolve("test/tests.kt")
        targetFile.delete()
        targetFile.parentFile.mkdirs()

        targetFile.bufferedWriter().use { writer ->
            writer.apply {
                appendln("// DO NOT EDIT MANUALLY! GENERATED BY generateTestsWithAdvancedVersion.kt")
                appendln("package ${testType}VersionGradleTests")

                for (sourceTestClass in sourceTestClasses) {
                    val targetTestName = "${sourceTestClass.simpleName}With${testType.capitalize()}Gradle"

                    appendln()
                    appendln("class $targetTestName : ${sourceTestClass.qualifiedName}() {")
                    appendln("    override val useMinVersion = $useMinVersion")
                    appendln("}")
                }
            }
        }
    }

    companion object {
        private val integrationTestsModule = File("libraries/tools/kotlin-gradle-plugin-integration-tests")
    }
}
